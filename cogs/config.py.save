import discord
from discord.ext import commands
import datetime
from datetime import date
import regex as re
import os
import json


class Config(commands.Cog):
    """These commands are meant for administative duties or learning more information about the bot."""
    def __init__(self, bot):
        self.bot = bot



    @commands.command()
    async def uptime(self, ctx):
        """This command shows how long the bot has been running."""
        delta_uptime = datetime.datetime.utcnow() - self.bot.launch_time
        hours, remainder = divmod(int(delta_uptime.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        days, hours = divmod(hours, 24)
        await ctx.send(f"I have been online for: {days} days, {hours} hours, {minutes} minutes, {seconds} seconds.")



    @commands.Cog.listener()
    async def on_guild_join(self, guild):
        connection = await self.bot.pg_con.acquire()
        async with connection.transaction():
            await connection.execute('INSERT INTO prefixes (guild_id, prefix) VALUES($1, $2)', guild.id, '-')
        await self.bot.pg_con.release(connection)

    @commands.command()
    @commands.is_owner() 
    async def reload(self, ctx, extension):
        """This is a bot owner only command."""
        self.bot.reload_extension(f'cogs.{extension}')
        await ctx.send(f'Reloaded {extension}.')
    
    @reload.error
    async def reload_error(self, ctx, error):
        embed = discord.Embed(color=discord.Color.red(), timestamp=datetime.datetime.utcnow(), title='ERROR', description=error)
        await ctx.send(embed=embed)




    @commands.command() 
    @commands.is_owner()
    async def reloadall(self, ctx):
        """This is a bot owner only command."""
        for file in os.listdir("cogs"): 
            if file.endswith(".py"):
                name = file[:-3]
                try:
                    self.bot.reload_extension(f'cogs.{name}')
                    await ctx.send(f'Reloaded {name}.')
                except Exception as e:
                    embed = discord.Embed(color=discord.Color.red(), timestamp=datetime.datetime.utcnow(), title='ERROR', description=e)
                    await ctx.send(embed=embed)


    
    @commands.Cog.listener()
    async def on_guild_remove(self, guild):
        connection = await selfbot.pg_con.acquire()
        async with connection.transaction():
            await connection.execute('DELETE FROM prefixes WHERE guild_id = $1', guild_id)
        await self.bot.pg_con.release(connection)



    @commands.command()
    async def servers(self, ctx):
        """This command will give you information on the amount of servers this bot is in. The owner of this bot may see each server however for privacy reasons you may not."""
        if ctx.author.id == 713979128969429012:
            await ctx.send(f':white_check_mark: {ctx.author.mention}, please check terminal or your direct messages.')
            for guild in self.bot.guilds:
                await ctx.author.send(guild.name)
                print(guild.name)
        else:
            await ctx.send(f':x: {ctx.author.mention}, for privacy reasons only the bot owner may see a list of servers, for a total count of servers, the number is {len(self.bot.guilds)}')

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def prefix(self, ctx, prefix = None):
        """This command sets the bot's prefix for the server only. Requires administrator."""
        if prefix == None:
            connection = await self.bot.pg_con.acquire()
            async with connection.transaction():
                prefixn = await connection.fetch('SELECT prefix FROM prefixes WHERE guild_id = $1', guild_id)
            await self.bot.pg_con.release(connection)
            if str(ctx.guild.id) in prefixes:
                await ctx.send(f"{ctx.guild.name}'s prefix is: {prefixn[0][0]}.")
            else:
                await ctx.send(f"{ctx.guild.name}'s prefix is: -.")
        else:
            connection = await self.bot.pg_con.acquire()
            async with connection.transaction():
                await connection.execute('UPDATE prefixes SET prefix = $1 WHERE guild_id = $2', prefix, ctx.guild.id)
            await self.bot.pg_con.release(connection)
            await ctx.send(f'Updated the prefix to {prefix}.')



    @commands.Cog.listener()
    async def on_message(self, message):
        if re.search(rf'^<@!?719727622782845031>$', message.content):       
            connection = await self.bot.pg_con.acquire()
            async with connection.transaction():
                prefix = await connection.fetch('SELECT prefix FROM prefixes WHERE guild_id = $1', guild_id)
            await self.bot.pg_con.release(connection)

            await message.channel.send(f"{message.author.mention} my prefix in this server is: {prefix[0][0]}.")


    @commands.command()
    async def support(self, ctx):
        embed = discord.Embed(color=discord.Color.gold(), title='Bigbot Support Server', description='[Click Here](https://discord.gg/da3jdR5)')
        await ctx.send(embed=embed)

    @commands.command()
    async def info(self, ctx):
        embed = discord.Embed(color=discord.Color.blue(), title='Bigbot Info')
        embed.add_field(name='Owner:', value='nope#8182')
        embed.add_field(name='Support Server:', value='[Click Here](https://discord.gg/da3jdR5)')
        embed.add_field(name='Stats', value=f'Users: {len(bot.get_all_members())}\nServers:{len(bot.guilds)}')
        embed.add_field(name='Support Us', value='[Here](https://top.gg/bot/719727622782845031), [Here](https://discordbotlist.com/bots/bigbot), and [Here](https://discord.bots.gg/bots/719727622782845031)')
        await ctx.send(embed=embed)





    




def setup(bot):
    bot.add_cog(Config(bot))
        
